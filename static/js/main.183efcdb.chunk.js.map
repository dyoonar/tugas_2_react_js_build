{"version":3,"sources":["Events/TopEvents.js","Page/Footer.js","ListData/ListMakanan.js","Page/MenuMakanan.js","App.js","serviceWorker.js","index.js"],"names":["TopEvents","href","onClick","e","value","preventDefault","alert","handleFooter","Footer","Component","ListMakanan","props","state","datalist","gmbr","src","this","alt","width","MenuMakanan","pesan","rubahPesanan","bind","pesanan","setState","console","log","target","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oPAYeA,EAVG,WAMd,OACI,uBAAGC,KAAK,IAAIC,QAAW,SAAAC,GAAC,OANP,SAACC,EAAOD,GACzBA,EAAEE,iBACFC,MAAMF,GAIsBG,CAAa,eAAgBJ,KAAzD,iBCMOK,E,uKAVP,OACI,6BACI,kBAAC,EAAD,MACA,qD,GALKC,a,OCcNC,E,kDAdX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,SAAU,EAAKF,MAAMG,MAHX,E,qDAOd,OACI,6BACI,yBAAKC,IAAKC,KAAKJ,MAAMC,SAAUI,IAAI,kBAAkBC,MAAM,a,GAVjDT,aCuEXU,E,kDArEX,WAAYR,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTQ,MAAO,GAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAND,E,2DAUdN,KAAKQ,UAAS,SAACZ,EAAOD,GAClB,MAAM,CACFS,MAAOR,EAAMQ,MAAQ,Q,8BAKzBjB,GACJsB,QAAQC,IAAIvB,EAAEwB,OAAOvB,S,+BAIrB,OACI,6BACI,mEAGA,+BACI,4BACI,4BACI,kBAAC,EAAD,CAAaU,KAAK,6EAClB,gCACI,4BAAQZ,QAASc,KAAKK,cAAtB,oBAGR,4BACI,kBAAC,EAAD,CAAaP,KAAK,uEAClB,gCACI,4BAAQZ,QAASc,KAAKK,cAAtB,oBAGR,4BACI,kBAAC,EAAD,CAAaP,KAAK,+EAClB,gCACI,4BAAQZ,QAASc,KAAKK,cAAtB,oBAGR,4BACI,kBAAC,EAAD,CAAaP,KAAK,4GAClB,gCACI,4BAAQZ,QAASc,KAAKK,cAAtB,oBAGR,4BACI,kBAAC,EAAD,CAAaP,KAAK,6FAClB,gCACI,4BAAQZ,QAASc,KAAKK,cAAtB,sBAKhB,6BACA,2BAAOO,KAAK,OAAOC,SAAUb,KAAKO,UAClC,8CAAoBP,KAAKJ,MAAMQ,Y,GAhErBX,aCaXqB,MAVf,WACE,OACE,6BACI,8FACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.183efcdb.chunk.js","sourcesContent":["import React from 'react';\n\nconst TopEvents = () => {\n    const handleFooter = (value, e) =>{\n        e.preventDefault();\n        alert(value);\n    };\n\n    return(\n        <a href=\"/\" onClick = {e => handleFooter('Back To Home', e)}>Back To Home</a>\n    );\n};\nexport default TopEvents;","import React, {Component} from 'react';\nimport TopEvents from '../Events/TopEvents';\n\nclass Footer extends Component{\n    render(){\n        return(\n            <div>\n                <TopEvents />\n                <h3>\n                    Tugas 3 React Js\n                </h3>\n            </div>\n        )\n    }\n}\nexport default Footer;","import React, {Component} from \"react\";\n\nclass ListMakanan extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            datalist: this.props.gmbr\n        };\n    }\n    render(){\n        return(\n            <div>\n                <img src={this.state.datalist} alt=\"Product Makanan\" width=\"150\" />\n            </div>\n        )\n    }\n}\nexport default ListMakanan;","import React, {Component} from 'react';\nimport ListMakanan from \"../ListData/ListMakanan\";\n\nclass MenuMakanan extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            pesan: 0\n        };\n        this.rubahPesanan = this.rubahPesanan.bind(this);\n        this.pesanan = this.pesanan.bind(this);\n    }\n\n    rubahPesanan(){\n        this.setState((state, props) =>{\n            return{\n                pesan: state.pesan + 1\n            };\n        });\n    }\n\n    pesanan(e){\n        console.log(e.target.value);\n    }\n\n    render(){\n        return(\n            <div>\n                <h3>\n                    Daftar Makanan Yang Kami Sediakan :\n                </h3>\n                <table>\n                    <tr>\n                        <td>\n                            <ListMakanan gmbr=\"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/nasipadang.jpg\"/>\n                            <center>\n                                <button onClick={this.rubahPesanan}>Pesan Sekarang</button>\n                            </center>\n                        </td>\n                        <td>\n                            <ListMakanan gmbr=\"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/sate.png\"/>\n                            <center>\n                                <button onClick={this.rubahPesanan}>Pesan Sekarang</button>\n                            </center>\n                        </td>\n                        <td>\n                            <ListMakanan gmbr=\"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/sotolamongan.png\"/>\n                            <center>\n                                <button onClick={this.rubahPesanan}>Pesan Sekarang</button>\n                            </center>\n                        </td>\n                        <td>\n                            <ListMakanan gmbr=\"https://www.dbs.com/iwov-resources/images/newsroom/indonesia/Blog/masakan%20nusantara/nasi%20kentut.png\"/>\n                            <center>\n                                <button onClick={this.rubahPesanan}>Pesan Sekarang</button>\n                            </center>\n                        </td>\n                        <td>\n                            <ListMakanan gmbr=\"https://blog.tokowahab.com/wp-content/uploads/2020/03/Resep-Nasi-Kuning-Tumpeng-Mini.jpg\"/>\n                            <center>\n                                <button onClick={this.rubahPesanan}>Pesan Sekarang</button>\n                            </center>\n                        </td>\n                    </tr>\n                </table>\n                <br/>\n                <input type=\"text\" onChange={this.pesanan} />\n                <h3>Pesanan anda : {this.state.pesan}</h3>\n            </div>\n        );\n    }\n}\n\nexport default MenuMakanan;","import React from 'react';\nimport './App.css';\nimport Footer from './Page/Footer';\nimport MenuMakanan from './Page/MenuMakanan';\n\n\nfunction App() {\n  return (\n    <div>\n        <h1>SEMENTARA SEPERTI INI, FILE HEADER DAN FOOTER ADA DI PC KANTOR</h1>\n        <MenuMakanan />\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}